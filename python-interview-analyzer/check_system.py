#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã Interview Analyzer
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import sys
import os
import importlib
import subprocess
from pathlib import Path

def print_status(message, status="INFO"):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–æ–º"""
    colors = {
        "OK": "\033[92m‚úÖ",      # Green
        "ERROR": "\033[91m‚ùå",   # Red  
        "WARNING": "\033[93m‚ö†Ô∏è", # Yellow
        "INFO": "\033[94m‚ÑπÔ∏è",    # Blue
        "RESET": "\033[0m"       # Reset
    }
    
    color = colors.get(status, colors["INFO"])
    reset = colors["RESET"]
    print(f"{color} {message}{reset}")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    if version.major >= 3 and version.minor >= 10:
        print_status(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}", "OK")
        return True
    else:
        print_status(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.10+)", "ERROR")
        return False

def check_package(package_name, import_name=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞"""
    if import_name is None:
        import_name = package_name
    
    try:
        importlib.import_module(import_name)
        print_status(f"–ü–∞–∫–µ—Ç {package_name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "OK")
        return True
    except ImportError as e:
        print_status(f"–ü–∞–∫–µ—Ç {package_name}: –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({str(e)})", "ERROR")
        return False

def check_system_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    dependencies = [
        ("ffmpeg", "FFmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"),
        ("python3", "Python 3"),
        ("pip3", "Python package installer")
    ]
    
    all_ok = True
    for dep, description in dependencies:
        try:
            result = subprocess.run(
                ["which", dep], 
                capture_output=True, 
                text=True
            )
            if result.returncode == 0:
                print_status(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dep}: –Ω–∞–π–¥–µ–Ω ({result.stdout.strip()})", "OK")
            else:
                print_status(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dep}: –ù–ï –Ω–∞–π–¥–µ–Ω", "ERROR")
                all_ok = False
        except Exception as e:
            print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {dep}: {e}", "ERROR")
            all_ok = False
    
    return all_ok

def check_files_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    required_files = [
        "app/main.py",
        "app/config/settings.py", 
        "app/services/integrated_analyzer.py",
        "app/services/video_processor.py",
        "app/services/audio_processor.py",
        "app/services/interview_processor.py",
        "app/services/task_scheduler.py",
        "app/api/task_management.py",
        "requirements.txt",
        ".env.example"
    ]
    
    all_ok = True
    for file_path in required_files:
        if Path(file_path).exists():
            print_status(f"–§–∞–π–ª {file_path}: –Ω–∞–π–¥–µ–Ω", "OK")
        else:
            print_status(f"–§–∞–π–ª {file_path}: –ù–ï –Ω–∞–π–¥–µ–Ω", "ERROR")
            all_ok = False
    
    return all_ok

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_file = Path(".env")
    if env_file.exists():
        print_status("–§–∞–π–ª .env: –Ω–∞–π–¥–µ–Ω", "OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        with open(env_file, 'r') as f:
            content = f.read()
            
        required_vars = ["OPENAI_API_KEY"]
        for var in required_vars:
            if var in content and not content.count(f"{var}=your-") > 0:
                print_status(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", "OK")
            else:
                print_status(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var}: –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", "WARNING")
        
        return True
    else:
        print_status("–§–∞–π–ª .env: –ù–ï –Ω–∞–π–¥–µ–Ω (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ .env.example)", "WARNING")
        return False

def check_app_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        sys.path.insert(0, '.')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from app.config.settings import settings
        print_status("–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫: —É—Å–ø–µ—à–µ–Ω", "OK")
        
        from app.main import app
        print_status("–ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: —É—Å–ø–µ—à–µ–Ω", "OK")
        
        return True
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã Interview Analyzer")
    print("=" * 50)
    
    checks = [
        ("–í–µ—Ä—Å–∏—è Python", check_python_version),
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_system_dependencies), 
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", check_files_structure),
        ("–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_env_file)
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    all_passed = True
    for check_name, check_func in checks:
        print(f"\nüìã {check_name}:")
        if not check_func():
            all_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã
    print(f"\nüì¶ Python –ø–∞–∫–µ—Ç—ã:")
    
    critical_packages = [
        ("fastapi", "fastapi"),
        ("uvicorn", "uvicorn"),
        ("openai", "openai"),
        ("opencv-python", "cv2"),
        ("pandas", "pandas"),
        ("numpy", "numpy"),
        ("pydantic", "pydantic"),
        ("pydantic-settings", "pydantic_settings"),
        ("python-dotenv", "dotenv")
    ]
    
    for package, import_name in critical_packages:
        if not check_package(package, import_name):
            all_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    print(f"\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
    
    optional_packages = [
        ("librosa", "librosa"),
        ("speechrecognition", "speech_recognition"),
        ("mediapipe", "mediapipe"),
        ("torch", "torch"),
        ("transformers", "transformers"),
        ("whisper", "whisper"),
        ("gspread", "gspread")
    ]
    
    for package, import_name in optional_packages:
        check_package(package, import_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print(f"\nüöÄ –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    if not check_app_imports():
        all_passed = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if all_passed:
        print_status("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!", "OK")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8000")
    else:
        print_status("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "ERROR")
        print("\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ INSTALLATION.md –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
