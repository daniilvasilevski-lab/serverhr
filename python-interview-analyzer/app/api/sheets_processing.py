"""
API endpoints –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ Google Sheets
"""

import logging
from fastapi import APIRouter, HTTPException, BackgroundTasks
from pydantic import BaseModel
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/sheets", tags=["Google Sheets Processing"])


class ProcessSheetsResponse(BaseModel):
    success: bool
    message: str
    stats: Dict[str, int]


class UnprocessedInterviewsResponse(BaseModel):
    success: bool
    count: int
    interviews: List[Dict[str, Any]]


@router.post("/process-all", response_model=ProcessSheetsResponse)
async def process_all_interviews(background_tasks: BackgroundTasks):
    """
    –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ Google Sheets

    –≠—Ç–æ—Ç endpoint:
    1. –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—É—é Google —Ç–∞–±–ª–∏—Ü—É
    2. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ Processed != 1
    3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤—ã—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    5. –û—Ç–º–µ—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ (Processed = 1)

    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –Ω–∞–π–¥–µ–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—à–∏–±–æ–∫
    """
    try:
        from ..services.google_sheets_integration import get_sheets_integration
        from ..services.integrated_analyzer import IntegratedInterviewAnalyzer
        from ..services.cv_analyzer import CVAnalyzer
        from ..services.questions_analyzer import QuestionsAnalyzer
        import openai
        from ..config.settings import settings

        logger.info("üöÄ Starting Google Sheets processing...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        sheets_service = get_sheets_integration()

        openai_client = openai.OpenAI(api_key=settings.openai_api_key)
        analyzer = IntegratedInterviewAnalyzer(openai_client)
        cv_analyzer = CVAnalyzer(openai_client)
        questions_analyzer = QuestionsAnalyzer(openai_client)

        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        stats = await sheets_service.process_all_unprocessed(
            analyzer=analyzer,
            cv_analyzer=cv_analyzer,
            questions_analyzer=questions_analyzer
        )

        logger.info(f"‚úÖ Processing completed: {stats}")

        return ProcessSheetsResponse(
            success=True,
            message=f"Processed {stats['processed']} out of {stats['found']} interviews",
            stats=stats
        )

    except Exception as e:
        logger.error(f"‚ùå Error processing sheets: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/unprocessed", response_model=UnprocessedInterviewsResponse)
async def get_unprocessed_interviews():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ Google Sheets

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    try:
        from ..services.google_sheets_integration import get_sheets_integration

        sheets_service = get_sheets_integration()

        unprocessed = await sheets_service.scan_for_unprocessed_interviews()

        return UnprocessedInterviewsResponse(
            success=True,
            count=len(unprocessed),
            interviews=unprocessed
        )

    except Exception as e:
        logger.error(f"‚ùå Error getting unprocessed interviews: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/reload-prompts")
async def reload_prompts():
    """
    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –∏–∑ prompts.yaml –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ production
    """
    try:
        from ..config.prompts_loader import reload_prompts

        reload_prompts()

        return {
            "success": True,
            "message": "Prompts reloaded successfully"
        }

    except Exception as e:
        logger.error(f"‚ùå Error reloading prompts: {e}")
        raise HTTPException(status_code=500, detail=str(e))
