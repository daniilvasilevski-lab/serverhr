"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–∞ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–í–ê–ñ–ù–û: –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª prompts.yaml –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞!
–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: docker-compose restart app
"""

import yaml
import os
from typing import Dict, Optional, Any
import logging

logger = logging.getLogger(__name__)


class PromptsLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""

    _instance = None
    _prompts_data: Optional[Dict[str, Any]] = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if self._prompts_data is None:
            self.reload()

    @property
    def prompts_file(self) -> str:
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç app/config/prompts_loader.py
        base_dir = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        return os.path.join(base_dir, 'prompts.yaml')

    def reload(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.prompts_file):
                with open(self.prompts_file, 'r', encoding='utf-8') as f:
                    self._prompts_data = yaml.safe_load(f)
                logger.info(f"‚úÖ Prompts loaded from: {self.prompts_file}")
            else:
                logger.warning(f"‚ö†Ô∏è Prompts file not found: {self.prompts_file}")
                self._prompts_data = self._get_fallback_prompts()
        except Exception as e:
            logger.error(f"‚ùå Error loading prompts: {e}")
            self._prompts_data = self._get_fallback_prompts()

    def _get_fallback_prompts(self) -> Dict:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ fallback –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º"""
        return {
            "system_prompts": {
                "integrated_analyzer": {
                    "ru": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥ –∏ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 15+ –ª–µ—Ç –æ–ø—ã—Ç–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–µ–ª–æ—Å—Ç–Ω–æ.",
                    "en": "You are an expert psychologist and HR specialist with 15+ years experience. Analyze holistically.",
                },
                "cv_analyzer": {
                    "ru": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ.",
                    "en": "You are a professional HR analyst. Analyze objectively.",
                }
            }
        }

    def get_system_prompt(self, analyzer_type: str, language: str = "ru") -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

        Args:
            analyzer_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (integrated_analyzer, cv_analyzer, etc.)
            language: –Ø–∑—ã–∫ –ø—Ä–æ–º–ø—Ç–∞ (ru, en, pl)

        Returns:
            str: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        if not self._prompts_data:
            self.reload()

        system_prompts = self._prompts_data.get('system_prompts', {})
        analyzer_prompts = system_prompts.get(analyzer_type, {})

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        prompt = analyzer_prompts.get(language)

        # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞
        if not prompt:
            prompt = analyzer_prompts.get('ru', '')

        if not prompt:
            logger.warning(f"‚ö†Ô∏è No prompt found for {analyzer_type}/{language}")

        return prompt

    def get_criteria_prompt(self, criterion: str, language: str = "ru") -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è

        Args:
            criterion: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è
            language: –Ø–∑—ã–∫

        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è
        """
        if not self._prompts_data:
            self.reload()

        criteria_prompts = self._prompts_data.get('evaluation_criteria_prompts', {})
        criterion_prompts = criteria_prompts.get(criterion, {})

        return criterion_prompts.get(language, criterion_prompts.get('ru', ''))

    def get_recommendation_prompt(self, score: int, language: str = "ru") -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞

        Args:
            score: –û–±—â–∏–π –±–∞–ª–ª (0-100)
            language: –Ø–∑—ã–∫

        Returns:
            str: –¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        if not self._prompts_data:
            self.reload()

        rec_prompts = self._prompts_data.get('recommendation_prompts', {})

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –±–∞–ª–ª—É
        for category, data in rec_prompts.items():
            threshold = data.get('threshold', 0)
            if score >= threshold:
                return data.get(language, data.get('ru', '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞'))

        return "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"

    def get_special_instruction(self, key: str) -> Any:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

        Args:
            key: –ö–ª—é—á –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

        Returns:
            Any: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        """
        if not self._prompts_data:
            self.reload()

        special = self._prompts_data.get('special_instructions', {})
        return special.get(key)

    def get_criteria_weights(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        if not self._prompts_data:
            self.reload()

        special = self._prompts_data.get('special_instructions', {})
        return special.get('criteria_weights', {})

    def is_strict_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏"""
        return self.get_special_instruction('strict_mode') or False

    def requires_examples(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É—é—Ç—Å—è –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏"""
        return self.get_special_instruction('require_examples') or False

    def get_min_score_for_hire(self) -> int:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ –Ω–∞–π–º—É"""
        return self.get_special_instruction('min_score_for_hire') or 70


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
_prompts_loader = None


def get_prompts_loader() -> PromptsLoader:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    global _prompts_loader
    if _prompts_loader is None:
        _prompts_loader = PromptsLoader()
    return _prompts_loader


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_system_prompt(analyzer_type: str, language: str = "ru") -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É"""
    return get_prompts_loader().get_system_prompt(analyzer_type, language)


def get_recommendation(score: int, language: str = "ru") -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    return get_prompts_loader().get_recommendation_prompt(score, language)


def reload_prompts():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (–¥–ª—è hot-reload)"""
    get_prompts_loader().reload()
    logger.info("üîÑ Prompts reloaded successfully")
