"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º –∫–æ–ª–æ–Ω–æ–∫
"""

import logging
from typing import Dict, List, Any, Optional
import gspread
from google.oauth2.service_account import Credentials
import os
from datetime import datetime

from ..models.evaluation_criteria import InterviewAnalysis, EvaluationCriteria
from ..config.settings import settings

logger = logging.getLogger(__name__)


class GoogleSheetsIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""

    def __init__(self):
        self.gc = None
        self.source_sheet = None
        self.results_sheet = None

        # –í—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0)
        self.INPUT_COLUMNS = {
            'ID': 0,            # A
            'Name': 1,          # B
            'Email': 2,         # C
            'Phone': 3,         # D
            'Preferences': 4,   # E
            'CV_gcs': 5,        # F
            'video_gcs': 6,     # G
            'CV_URL': 7,        # H
            'Video_URL': 8,     # I
            'created_at': 9,    # J
            'Questions_URL': 10,# K
            'Processed': 11     # L
        }

        # –í—ã—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º)
        self.OUTPUT_COLUMNS_MAP = {
            'ID': 0,                    # A
            'Name': 1,                  # B
            'Email': 2,                 # C
            'Phone': 3,                 # D
            'Language': 4,              # E
            'Communication': 5,         # F - –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            'Motivation': 6,            # G - –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é
            'Technical': 7,             # H - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            'Analytical': 8,            # I - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
            'Creative': 9,              # J - –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (unconventional_thinking + creativity_innovation)
            'Teamwork': 10,             # K - –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
            'Stress_Resistance': 11,    # L - —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
            'Adaptability': 12,         # M - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
            'Overall_Score': 13,        # N - –æ–±—â–∏–π –±–∞–ª–ª
            'Recommendation': 14        # O - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        }

        self.setup_google_sheets()

    def setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if not settings.google_service_account_key:
                logger.warning("Google service account key not configured")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(settings.google_service_account_key):
                logger.error(f"Service account key file not found: {settings.google_service_account_key}")
                return

            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]

            creds = Credentials.from_service_account_file(
                settings.google_service_account_key,
                scopes=scope
            )
            self.gc = gspread.authorize(creds)
            logger.info("‚úÖ Google Sheets connection established")

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
            if settings.source_sheet_url:
                self.source_sheet = self.gc.open_by_url(settings.source_sheet_url).sheet1
                logger.info(f"‚úÖ Connected to source sheet: {self.source_sheet.title}")

            if settings.results_sheet_url:
                self.results_sheet = self.gc.open_by_url(settings.results_sheet_url).sheet1
                logger.info(f"‚úÖ Connected to results sheet: {self.results_sheet.title}")
                self._ensure_results_headers()

        except Exception as e:
            logger.error(f"‚ùå Failed to setup Google Sheets: {e}")
            raise

    def _ensure_results_headers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            if not self.results_sheet:
                return

            expected_headers = [
                'ID', 'Name', 'Email', 'Phone', 'Language',
                'Communication', 'Motivation', 'Technical', 'Analytical',
                'Creative', 'Teamwork', 'Stress_Resistance', 'Adaptability',
                'Overall_Score', 'Recommendation'
            ]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            current_headers = self.results_sheet.row_values(1)

            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
            if not current_headers or current_headers != expected_headers:
                self.results_sheet.update('A1:O1', [expected_headers])

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self.results_sheet.format('A1:O1', {
                    'textFormat': {'bold': True, 'fontSize': 11},
                    'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.9},
                    'horizontalAlignment': 'CENTER'
                })

                logger.info("‚úÖ Results sheet headers configured")

        except Exception as e:
            logger.error(f"Failed to ensure results headers: {e}")

    async def scan_for_unprocessed_interviews(self) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é"""
        if not self.source_sheet:
            logger.error("Source sheet not configured")
            return []

        try:
            all_values = self.source_sheet.get_all_values()

            if not all_values or len(all_values) < 2:
                logger.info("No data found in source sheet")
                return []

            headers = all_values[0]
            rows = all_values[1:]

            unprocessed = []

            for row_idx, row in enumerate(rows, start=2):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
                if len(row) <= self.INPUT_COLUMNS['Processed']:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ Processed
                processed_value = row[self.INPUT_COLUMNS['Processed']].strip() if len(row) > self.INPUT_COLUMNS['Processed'] else ''

                if not processed_value or processed_value != '1':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Video_URL
                    video_url = row[self.INPUT_COLUMNS['Video_URL']].strip() if len(row) > self.INPUT_COLUMNS['Video_URL'] else ''

                    if video_url:
                        interview_data = {
                            'row_number': row_idx,
                            'id': row[self.INPUT_COLUMNS['ID']],
                            'name': row[self.INPUT_COLUMNS['Name']],
                            'email': row[self.INPUT_COLUMNS['Email']] if len(row) > self.INPUT_COLUMNS['Email'] else '',
                            'phone': row[self.INPUT_COLUMNS['Phone']] if len(row) > self.INPUT_COLUMNS['Phone'] else '',
                            'preferences': row[self.INPUT_COLUMNS['Preferences']] if len(row) > self.INPUT_COLUMNS['Preferences'] else '',
                            'cv_url': row[self.INPUT_COLUMNS['CV_URL']] if len(row) > self.INPUT_COLUMNS['CV_URL'] else '',
                            'video_url': video_url,
                            'questions_url': row[self.INPUT_COLUMNS['Questions_URL']] if len(row) > self.INPUT_COLUMNS['Questions_URL'] else '',
                            'created_at': row[self.INPUT_COLUMNS['created_at']] if len(row) > self.INPUT_COLUMNS['created_at'] else ''
                        }

                        unprocessed.append(interview_data)
                        logger.info(f"üìã Found unprocessed interview: {interview_data['name']} (Row {row_idx})")

            logger.info(f"‚úÖ Found {len(unprocessed)} unprocessed interviews")
            return unprocessed

        except Exception as e:
            logger.error(f"‚ùå Error scanning for unprocessed interviews: {e}")
            return []

    async def save_analysis_results(self, analysis: InterviewAnalysis, candidate_info: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –≤—ã—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É

        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
            candidate_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ (–≤–∫–ª—é—á–∞—è email, phone)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        if not self.results_sheet:
            logger.error("Results sheet not configured")
            return False

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
            language = self._detect_language(analysis.detailed_feedback)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            scores = analysis.scores

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_row = [
                candidate_info.get('id', ''),                                              # A: ID
                analysis.candidate_name,                                                   # B: Name
                candidate_info.get('email', ''),                                           # C: Email
                candidate_info.get('phone', ''),                                           # D: Phone
                language.upper(),                                                          # E: Language
                scores.get(EvaluationCriteria.COMMUNICATION_SKILLS, {}).get('score', 0),  # F: Communication
                scores.get(EvaluationCriteria.MOTIVATION_LEARNING, {}).get('score', 0),   # G: Motivation
                scores.get(EvaluationCriteria.PROFESSIONAL_SKILLS, {}).get('score', 0),   # H: Technical
                scores.get(EvaluationCriteria.ANALYTICAL_THINKING, {}).get('score', 0),   # I: Analytical
                self._calculate_creative_score(scores),                                     # J: Creative
                scores.get(EvaluationCriteria.TEAMWORK_ABILITY, {}).get('score', 0),      # K: Teamwork
                scores.get(EvaluationCriteria.STRESS_RESISTANCE, {}).get('score', 0),     # L: Stress_Resistance
                scores.get(EvaluationCriteria.ADAPTABILITY, {}).get('score', 0),          # M: Adaptability
                analysis.total_score,                                                       # N: Overall_Score
                analysis.recommendation                                                     # O: Recommendation
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
            self.results_sheet.append_row(results_row)

            logger.info(f"‚úÖ Results saved for candidate: {analysis.candidate_name} (ID: {candidate_info.get('id')})")
            return True

        except Exception as e:
            logger.error(f"‚ùå Failed to save analysis results: {e}")
            return False

    async def mark_as_processed(self, interview_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–æ –≤—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ

        Args:
            interview_data: –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å row_number

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.source_sheet:
            logger.error("Source sheet not configured")
            return False

        try:
            row_number = interview_data['row_number']
            processed_column = chr(ord('A') + self.INPUT_COLUMNS['Processed'])
            cell_address = f"{processed_column}{row_number}"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "1"
            self.source_sheet.update(cell_address, "1")

            logger.info(f"‚úÖ Marked as processed: {interview_data['name']} (Row {row_number})")
            return True

        except Exception as e:
            logger.error(f"‚ùå Failed to mark as processed: {e}")
            return False

    def _calculate_creative_score(self, scores: Dict) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É
        –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é/–∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏
        """
        unconventional = scores.get(EvaluationCriteria.UNCONVENTIONAL_THINKING, {}).get('score', 0)
        creativity = scores.get(EvaluationCriteria.CREATIVITY_INNOVATION, {}).get('score', 0)

        if unconventional or creativity:
            return int((unconventional + creativity) / 2)
        return 0

    def _detect_language(self, text: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            str: –ö–æ–¥ —è–∑—ã–∫–∞ ('ru', 'en', 'pl')
        """
        if not text:
            return 'en'

        text_lower = text.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        has_cyrillic = any(ord('–∞') <= ord(char) <= ord('—è') or char == '—ë' for char in text_lower)
        if has_cyrillic:
            return 'ru'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        polish_chars = ['ƒÖ', 'ƒá', 'ƒô', '≈Ç', '≈Ñ', '√≥', '≈õ', '≈∫', '≈º']
        has_polish = any(char in text_lower for char in polish_chars)
        if has_polish:
            return 'pl'

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        return 'en'

    async def process_all_unprocessed(self, analyzer, cv_analyzer, questions_analyzer) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é

        Args:
            analyzer: –≠–∫–∑–µ–º–ø–ª—è—Ä IntegratedInterviewAnalyzer
            cv_analyzer: –≠–∫–∑–µ–º–ø–ª—è—Ä CVAnalyzer
            questions_analyzer: –≠–∫–∑–µ–º–ø–ª—è—Ä QuestionsAnalyzer

        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        stats = {
            'found': 0,
            'processed': 0,
            'failed': 0,
            'saved': 0
        }

        try:
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            unprocessed_interviews = await self.scan_for_unprocessed_interviews()
            stats['found'] = len(unprocessed_interviews)

            if not unprocessed_interviews:
                logger.info("‚ÑπÔ∏è No unprocessed interviews found")
                return stats

            logger.info(f"üìä Starting batch processing of {stats['found']} interviews...")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            for idx, interview_data in enumerate(unprocessed_interviews, 1):
                try:
                    logger.info("=" * 80)
                    logger.info(f"üéØ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ö–ê–ù–î–ò–î–ê–¢–ê #{idx}/{stats['found']}")
                    logger.info(f"üë§ –ò–º—è: {interview_data['name']}")
                    logger.info(f"üÜî ID: {interview_data['id']}")
                    logger.info(f"üìß Email: {interview_data['email']}")
                    logger.info(f"üé• –í–∏–¥–µ–æ: {interview_data['video_url'][:60]}...")
                    logger.info("=" * 80)

                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
                    candidate_info = {
                        'id': interview_data['id'],
                        'name': interview_data['name'],
                        'email': interview_data['email'],
                        'phone': interview_data['phone'],
                        'preferences': interview_data['preferences']
                    }

                    logger.info(f"‚è≥ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è {interview_data['name']}...")

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
                    analysis_result = await analyzer.analyze_interview(
                        interview_data['video_url'],
                        candidate_info
                    )

                    if analysis_result:
                        stats['processed'] += 1

                        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {analysis_result.total_score}/100")
                        logger.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis_result.recommendation}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google Sheets...")
                        if await self.save_analysis_results(analysis_result, candidate_info):
                            stats['saved'] += 1

                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                            logger.info(f"‚úèÔ∏è –û—Ç–º–µ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ...")
                            await self.mark_as_processed(interview_data)

                            logger.info(f"üéâ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù: {interview_data['name']} ({idx}/{stats['found']})")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è: {interview_data['name']}")
                    else:
                        stats['failed'] += 1
                        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –¥–ª—è: {interview_data['name']}")

                except Exception as e:
                    stats['failed'] += 1
                    logger.error(f"‚ùå Error processing {interview_data['name']}: {e}")

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
                import asyncio
                await asyncio.sleep(2)

            logger.info(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     BATCH PROCESSING COMPLETED       ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë Found:      {stats['found']:3d}                     ‚ïë
‚ïë Processed:  {stats['processed']:3d}                     ‚ïë
‚ïë Saved:      {stats['saved']:3d}                     ‚ïë
‚ïë Failed:     {stats['failed']:3d}                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """)

            return stats

        except Exception as e:
            logger.error(f"‚ùå Error in batch processing: {e}")
            return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_sheets_integration = None


def get_sheets_integration() -> GoogleSheetsIntegration:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ Google Sheets"""
    global _sheets_integration
    if _sheets_integration is None:
        _sheets_integration = GoogleSheetsIntegration()
    return _sheets_integration
