"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
"""

import logging
import os
from typing import List, Dict, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from pydantic import BaseModel, Field

from .services.multimodal_analyzer import MultimodalInterviewAnalyzer
from .services.google_sheets_service import GoogleSheetsService
from .models.evaluation_criteria import InterviewAnalysis, EvaluationCriteria, CRITERIA_DESCRIPTIONS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
analyzer = None
sheets_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global analyzer, sheets_service
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("Initializing services...")
    
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        raise ValueError("OPENAI_API_KEY environment variable is required")
    
    analyzer = MultimodalInterviewAnalyzer(openai_api_key)
    sheets_service = GoogleSheetsService()
    
    logger.info("Services initialized successfully")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    logger.info("Shutting down services...")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="ü§ñ Interview Analyzer API",
    description="–ú–Ω–æ–≥–æ–º–æ–¥–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò",
    version="2.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
class AnalysisRequest(BaseModel):
    video_url: str = Field(..., description="URL –≤–∏–¥–µ–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
    candidate_id: str = Field(..., description="ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    candidate_name: str = Field(..., description="–ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    preferences: str = Field("", description="–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

class AnalysisResponse(BaseModel):
    success: bool
    analysis: InterviewAnalysis = None
    error: str = None

class CriteriaInfoResponse(BaseModel):
    success: bool
    criteria: Dict[str, Dict[str, Any]]

class StatusResponse(BaseModel):
    success: bool
    status: str
    unprocessed_count: int = 0
    services_status: Dict[str, str]

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
def get_analyzer():
    if analyzer is None:
        raise HTTPException(status_code=503, detail="Analyzer service not initialized")
    return analyzer

def get_sheets_service():
    if sheets_service is None:
        raise HTTPException(status_code=503, detail="Google Sheets service not initialized")
    return sheets_service

# –ú–∞—Ä—à—Ä—É—Ç—ã API

@app.get("/", summary="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def root():
    return {
        "message": "ü§ñ Interview Analyzer API v2.0",
        "description": "–ú–Ω–æ–≥–æ–º–æ–¥–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ò–ò",
        "features": [
            "10 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏",
            "–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–∞",
            "–ù–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets"
        ],
        "docs": "/docs"
    }

@app.get("/health", response_model=StatusResponse, summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services_status = {
        "analyzer": "ok" if analyzer else "not_initialized",
        "sheets_service": "ok" if sheets_service else "not_initialized",
        "openai_api": "ok" if os.getenv("OPENAI_API_KEY") else "missing_key"
    }
    
    all_ok = all(status == "ok" for status in services_status.values())
    
    return StatusResponse(
        success=all_ok,
        status="healthy" if all_ok else "degraded",
        services_status=services_status
    )

@app.get("/criteria", response_model=CriteriaInfoResponse, summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö –æ—Ü–µ–Ω–∫–∏")
async def get_criteria_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö –æ—Ü–µ–Ω–∫–∏"""
    criteria_dict = {}
    
    for criterion in EvaluationCriteria:
        description = CRITERIA_DESCRIPTIONS.get(criterion)
        if description:
            criteria_dict[criterion.value] = {
                "name": description.name,
                "description": description.description,
                "key_indicators": description.key_indicators,
                "verbal_aspects": description.verbal_aspects,
                "non_verbal_aspects": description.non_verbal_aspects
            }
    
    return CriteriaInfoResponse(
        success=True,
        criteria=criteria_dict
    )

@app.post("/analyze", response_model=AnalysisResponse, summary="–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
async def analyze_interview(
    request: AnalysisRequest,
    background_tasks: BackgroundTasks,
    analyzer_service: MultimodalInterviewAnalyzer = Depends(get_analyzer)
):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª–Ω—ã–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        logger.info(f"Starting analysis for candidate: {request.candidate_name}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        candidate_info = {
            "id": request.candidate_id,
            "name": request.candidate_name,
            "preferences": request.preferences
        }
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        analysis_result = await analyzer_service.analyze_interview(
            request.video_url,
            candidate_info
        )
        
        logger.info(f"Analysis completed for candidate: {request.candidate_name}")
        
        return AnalysisResponse(
            success=True,
            analysis=analysis_result
        )
        
    except Exception as e:
        logger.error(f"Analysis failed for {request.candidate_name}: {str(e)}")
        return AnalysisResponse(
            success=False,
            error=str(e)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": exc.detail,
            "status_code": exc.status_code
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    logger.error(f"Unhandled exception: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Internal server error",
            "detail": str(exc)
        }
    )

if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        reload=True if os.getenv("ENV") == "development" else False
    )