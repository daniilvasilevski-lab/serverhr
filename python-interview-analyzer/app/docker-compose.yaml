version: '3.8'

services:
  # === ОСНОВНОЕ ПРИЛОЖЕНИЕ ===
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: interview-analyzer
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - PORT=8000
      - HOST=0.0.0.0
      - TEMP_DIR=/app/temp
      - LOG_FILE=/app/logs/interview-analyzer.log
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./data:/app/data
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - interview-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # === РЕЖИМ РАЗРАБОТКИ ===
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: interview-analyzer-dev
    ports:
      - "8001:8000"
    environment:
      - ENV=development
      - PORT=8000
      - HOST=0.0.0.0
      - LOG_LEVEL=DEBUG
      - TEMP_DIR=/app/temp
    env_file:
      - .env
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - redis
    networks:
      - interview-network
    profiles:
      - dev

  # === REDIS ДЛЯ КЕШИРОВАНИЯ ===
  redis:
    image: redis:7-alpine
    container_name: interview-analyzer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - interview-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # === NGINX (ОПЦИОНАЛЬНО) ===
  nginx:
    image: nginx:alpine
    container_name: interview-analyzer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - interview-network
    profiles:
      - production

  # === PROMETHEUS ДЛЯ МОНИТОРИНГА ===
  prometheus:
    image: prom/prometheus:latest
    container_name: interview-analyzer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - interview-network
    profiles:
      - monitoring

  # === GRAFANA ДЛЯ ВИЗУАЛИЗАЦИИ ===
  grafana:
    image: grafana/grafana:latest
    container_name: interview-analyzer-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - interview-network
    profiles:
      - monitoring

  # === ТЕСТИРОВАНИЕ ===
  tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: interview-analyzer-tests
    environment:
      - ENV=testing
      - OPENAI_API_KEY=sk-test-key
    volumes:
      - ./tests:/app/tests
      - ./coverage:/app/coverage
    networks:
      - interview-network
    profiles:
      - testing

  # === БАЗА ДАННЫХ (ОПЦИОНАЛЬНО) ===
  postgres:
    image: postgres:15-alpine
    container_name: interview-analyzer-db
    environment:
      - POSTGRES_DB=interview_analyzer
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - interview-network
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d interview_analyzer"]
      interval: 10s
      timeout: 5s
      retries: 3

# === VOLUMES ===
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  postgres_data:
    driver: local

# === NETWORKS ===
networks:
  interview-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
