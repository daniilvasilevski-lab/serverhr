"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
"""

import logging
import os
from typing import List, Dict, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from pydantic import BaseModel, Field

from .config.settings import settings, get_settings, LoggingSettings, SecuritySettings
from .services.integrated_analyzer import IntegratedInterviewAnalyzer
from .services.temporal_analyzer import TemporalInterviewAnalyzer
from .services.cv_analyzer import CVAnalyzer
from .services.questions_analyzer import QuestionsAnalyzer
from .services.google_sheets_service import GoogleSheetsService
from .services.results_sheets_service import ResultsSheetsService
from .models.evaluation_criteria import InterviewAnalysis, EvaluationCriteria, CRITERIA_DESCRIPTIONS
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(LoggingSettings.get_config())
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
analyzer = None
temporal_analyzer = None
sheets_service = None
results_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global analyzer, temporal_analyzer, sheets_service, results_service
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("Initializing services...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
    openai_client = openai.OpenAI(api_key=settings.openai_api_key)
    analyzer = IntegratedInterviewAnalyzer(openai_client)
    temporal_analyzer = TemporalInterviewAnalyzer(openai_client)
    cv_analyzer = CVAnalyzer(openai_client)
    questions_analyzer = QuestionsAnalyzer(openai_client)
    sheets_service = GoogleSheetsService()
    results_service = ResultsSheetsService()
    
    logger.info("Services initialized successfully")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    logger.info("Shutting down services...")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="ü§ñ Interview Analyzer API",
    description="–ú–Ω–æ–≥–æ–º–æ–¥–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò",
    version="2.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
cors_config = SecuritySettings.get_cors_config()
app.add_middleware(
    CORSMiddleware,
    **cors_config
)

# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
class AnalysisRequest(BaseModel):
    video_url: str = Field(..., description="URL –≤–∏–¥–µ–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
    candidate_id: str = Field(..., description="ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    candidate_name: str = Field(..., description="–ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    preferences: str = Field("", description="–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

class EnhancedAnalysisRequest(BaseModel):
    video_url: str = Field(..., description="URL –≤–∏–¥–µ–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
    candidate_id: str = Field(..., description="ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    candidate_name: str = Field(..., description="–ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    preferences: str = Field("", description="–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    questions_url: str = Field("", description="URL —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é")
    cv_url: str = Field("", description="URL CV –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    use_temporal_analysis: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑")

class AnalysisResponse(BaseModel):
    success: bool
    analysis: InterviewAnalysis = None
    error: str = None

class CriteriaInfoResponse(BaseModel):
    success: bool
    criteria: Dict[str, Dict[str, Any]]

class StatusResponse(BaseModel):
    success: bool
    status: str
    unprocessed_count: int = 0
    services_status: Dict[str, str]

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
def get_analyzer():
    if analyzer is None:
        raise HTTPException(status_code=503, detail="Analyzer service not initialized")
    return analyzer

def get_sheets_service():
    if sheets_service is None:
        raise HTTPException(status_code=503, detail="Google Sheets service not initialized")
    return sheets_service

def get_temporal_analyzer():
    if temporal_analyzer is None:
        raise HTTPException(status_code=503, detail="Temporal analyzer service not initialized")
    return temporal_analyzer

# –ú–∞—Ä—à—Ä—É—Ç—ã API

@app.get("/", summary="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def root():
    return {
        "message": "ü§ñ Interview Analyzer API v2.0",
        "description": "–ú–Ω–æ–≥–æ–º–æ–¥–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ò–ò",
        "features": [
            "10 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏",
            "–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–∞",
            "–ù–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets"
        ],
        "docs": "/docs"
    }

@app.get("/health", response_model=StatusResponse, summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services_status = {
        "analyzer": "ok" if analyzer else "not_initialized",
        "sheets_service": "ok" if sheets_service else "not_initialized",
        "openai_api": "ok" if settings.openai_api_key else "missing_key",
        "settings": "ok" if settings else "not_loaded"
    }
    
    all_ok = all(status == "ok" for status in services_status.values())
    
    return StatusResponse(
        success=all_ok,
        status="healthy" if all_ok else "degraded",
        services_status=services_status
    )

@app.get("/criteria", response_model=CriteriaInfoResponse, summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö –æ—Ü–µ–Ω–∫–∏")
async def get_criteria_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö –æ—Ü–µ–Ω–∫–∏"""
    criteria_dict = {}
    
    for criterion in EvaluationCriteria:
        description = CRITERIA_DESCRIPTIONS.get(criterion)
        if description:
            criteria_dict[criterion.value] = {
                "name": description.name,
                "description": description.description,
                "key_indicators": description.key_indicators,
                "verbal_aspects": description.verbal_aspects,
                "non_verbal_aspects": description.non_verbal_aspects
            }
    
    return CriteriaInfoResponse(
        success=True,
        criteria=criteria_dict
    )

@app.post("/analyze", response_model=AnalysisResponse, summary="–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
async def analyze_interview(
    request: AnalysisRequest,
    background_tasks: BackgroundTasks,
    analyzer_service: IntegratedInterviewAnalyzer = Depends(get_analyzer)
):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª–Ω—ã–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        logger.info(f"Starting analysis for candidate: {request.candidate_name}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        candidate_info = {
            "id": request.candidate_id,
            "name": request.candidate_name,
            "preferences": request.preferences
        }
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        analysis_result = await analyzer_service.analyze_interview(
            request.video_url,
            candidate_info
        )
        
        logger.info(f"Analysis completed for candidate: {request.candidate_name}")
        
        return AnalysisResponse(
            success=True,
            analysis=analysis_result
        )
        
    except Exception as e:
        logger.error(f"Analysis failed for {request.candidate_name}: {str(e)}")
        return AnalysisResponse(
            success=False,
            error=str(e)
        )

@app.post("/analyze-and-save", response_model=AnalysisResponse, summary="–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
async def analyze_and_save_to_results(
    request: AnalysisRequest,
    background_tasks: BackgroundTasks,
    analyzer_service: IntegratedInterviewAnalyzer = Depends(get_analyzer)
):
    """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        logger.info(f"Starting analysis and save for candidate: {request.candidate_name}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        candidate_info = {
            "id": request.candidate_id,
            "name": request.candidate_name,
            "preferences": request.preferences
        }
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        analysis_result = await analyzer_service.analyze_interview(
            request.video_url,
            candidate_info
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if results_service:
            background_tasks.add_task(
                save_analysis_to_results,
                analysis_result
            )
        
        logger.info(f"Analysis completed and save queued for: {request.candidate_name}")
        
        return AnalysisResponse(
            success=True,
            analysis=analysis_result
        )
        
    except Exception as e:
        logger.error(f"Analysis failed for {request.candidate_name}: {str(e)}")
        return AnalysisResponse(
            success=False,
            error=str(e)
        )

@app.post("/analyze-temporal", response_model=AnalysisResponse, summary="üïí –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é (30-—Å–µ–∫—É–Ω–¥–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è)")
async def analyze_interview_temporal(
    request: AnalysisRequest,
    background_tasks: BackgroundTasks,
    temporal_analyzer_service: TemporalInterviewAnalyzer = Depends(get_temporal_analyzer)
):
    """
    –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é —Å 30-—Å–µ–∫—É–Ω–¥–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å —Ç–∏–ø–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –î–∏–Ω–∞–º–∏–∫—É –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
    - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å —Ç–∏–ø–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    - –ê–Ω–∞–ª–∏–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    """
    try:
        logger.info(f"Starting temporal analysis for candidate: {request.candidate_name}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        candidate_info = {
            "id": request.candidate_id,
            "name": request.candidate_name,
            "preferences": request.preferences
        }
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
        transcript_data = {
            "transcript": f"–ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {request.candidate_name}. –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç {request.candidate_name}. –Ø –∏–∑—É—á–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π. –ù–µ–¥–∞–≤–Ω–æ –∏–∑—É—á–∏–ª React –∏ —Å–¥–µ–ª–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤. –•–æ—á—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ. –í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –∏–∑—É—á–∞–µ–º Java, –Ω–æ –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è JavaScript. –î–µ–ª–∞–ª –ø—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –°—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –Ω–æ –Ω–∞—à–µ–ª —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–∑—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.",
            "linguistic_features": {
                "vocabulary_richness": 0.65,
                "grammar_complexity": 7
            }
        }
        
        video_data = {
            "duration": 360,  # 6 –º–∏–Ω—É—Ç = 12 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ 30 —Å–µ–∫—É–Ω–¥
            "emotion_analysis": {"confident": 40, "happy": 30, "neutral": 25, "nervous": 5},
            "eye_contact_percentage": 72,
            "posture_confidence": 7,
            "gesture_frequency": 12,
            "video_quality": 8
        }
        
        audio_data = {
            "speech_rate": 148,
            "speech_clarity": 7,
            "average_pitch": 175.0,
            "pitch_variation": 42.5,
            "pause_frequency": 8,
            "average_energy": 0.62,
            "audio_quality": 8
        }
        
        # –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis_result = await temporal_analyzer_service.analyze_interview_temporal(
            transcript_data,
            video_data,
            audio_data,
            candidate_info
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if results_service:
            background_tasks.add_task(
                save_analysis_to_results,
                analysis_result
            )
        
        logger.info(f"Temporal analysis completed for: {request.candidate_name}")
        
        return AnalysisResponse(
            success=True,
            analysis=analysis_result
        )
        
    except Exception as e:
        logger.error(f"Temporal analysis failed for {request.candidate_name}: {str(e)}")
        return AnalysisResponse(
            success=False,
            error=str(e)
        )

@app.post("/analyze-enhanced", response_model=AnalysisResponse, summary="üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å CV –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
async def analyze_interview_enhanced(
    request: EnhancedAnalysisRequest,
    background_tasks: BackgroundTasks
):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π CV –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
    
    –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:
    - –ê–Ω–∞–ª–∏–∑ CV –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)
    - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
    - –í—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–≤–µ–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—é –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å —Ç–∏–ø–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    - –ö–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ 10 –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    """
    try:
        logger.info(f"Starting enhanced analysis for candidate: {request.candidate_name}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        global cv_analyzer, questions_analyzer, temporal_analyzer, analyzer
        if not cv_analyzer:
            cv_analyzer = CVAnalyzer(openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY")))
        if not questions_analyzer:
            questions_analyzer = QuestionsAnalyzer(openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY")))
        
        # 1. –ê–Ω–∞–ª–∏–∑ CV –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        cv_analysis = await cv_analyzer.analyze_cv(request.cv_url, request.candidate_name)
        logger.info(f"CV analysis completed for {request.candidate_name}")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
        questions_analysis = await questions_analyzer.analyze_questions(request.questions_url, request.candidate_name)
        logger.info(f"Questions analysis completed for {request.candidate_name}")
        
        # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        candidate_info = {
            "id": request.candidate_id,
            "name": request.candidate_name,
            "preferences": request.preferences,
            "cv_analysis": cv_analysis,
            "questions_analysis": questions_analysis
        }
        
        # 4. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        if request.use_temporal_analysis:
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π CV –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            transcript_data = {
                "transcript": f"Enhanced transcript for {request.candidate_name}. –° —É—á–µ—Ç–æ–º CV: {cv_analysis.get('relevant_experience', '–æ–ø—ã—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')}. –í–æ–ø—Ä–æ—Å—ã: {questions_analysis.get('questions_analysis', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ')}. –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏.",
                "linguistic_features": {
                    "vocabulary_richness": 0.7 + (cv_analysis.get('cv_score', 5) - 5) * 0.05,
                    "grammar_complexity": 7 + (cv_analysis.get('cv_score', 5) - 5) * 0.3
                }
            }
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            expected_duration = questions_analysis.get('expected_duration', 30) * 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            if expected_duration == 0:
                expected_duration = 1800  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            video_data = {
                "duration": expected_duration,
                "emotion_analysis": {"confident": 45, "happy": 25, "neutral": 25, "nervous": 5},
                "eye_contact_percentage": 75,
                "posture_confidence": 7 + (cv_analysis.get('cv_score', 5) - 5) * 0.2,
                "gesture_frequency": 12,
                "video_quality": 8
            }
            
            audio_data = {
                "speech_rate": 150,
                "speech_clarity": 7 + (cv_analysis.get('cv_score', 5) - 5) * 0.2,
                "average_pitch": 175.0,
                "pitch_variation": 40.0,
                "pause_frequency": max(5, 15 - cv_analysis.get('cv_score', 5)),
                "average_energy": 0.6 + (cv_analysis.get('cv_score', 5) - 5) * 0.05,
                "audio_quality": 8
            }
            
            # –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_result = await temporal_analyzer.analyze_interview_temporal(
                transcript_data,
                video_data,
                audio_data,
                candidate_info
            )
            
        else:
            # –û–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_result = await analyzer.analyze_interview(
                request.video_url,
                candidate_info
            )
        
        # 5. –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CV –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        enhanced_feedback = analysis_result.detailed_feedback
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CV-–∏–Ω—Å–∞–π—Ç–æ–≤
        enhanced_feedback += f"\n\nüìã CV –ê–ù–ê–õ–ò–ó:\n"
        enhanced_feedback += f"‚Ä¢ –û—Ü–µ–Ω–∫–∞ CV: {cv_analysis.get('cv_score', 0)}/10\n"
        enhanced_feedback += f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç: {cv_analysis.get('relevant_experience', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        enhanced_feedback += f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏: {', '.join(cv_analysis.get('technical_skills', []))}\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        enhanced_feedback += f"\n‚ùì –°–¢–†–£–ö–¢–£–†–ê –ò–ù–¢–ï–†–í–¨–Æ:\n"
        enhanced_feedback += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_analysis.get('total_questions', 0)}\n"
        enhanced_feedback += f"‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {questions_analysis.get('interview_structure', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è')}\n"
        enhanced_feedback += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {questions_analysis.get('expected_duration', 30)} –º–∏–Ω—É—Ç\n"
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è CV —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
        cv_score = cv_analysis.get('cv_score', 5)
        if cv_score >= 8:
            enhanced_feedback += "\n‚úÖ CV –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ CV –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è —É–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤ –∏–Ω—Ç–µ—Ä–≤—å—é\n"
        elif cv_score <= 3:
            enhanced_feedback += "\n‚ö†Ô∏è CV –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –°–ª–∞–±–æ–µ CV —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –Ω–∞–≤—ã–∫–∞–º\n"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        analysis_result.detailed_feedback = enhanced_feedback
        
        # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if results_service:
            background_tasks.add_task(
                save_analysis_to_results,
                analysis_result
            )
        
        logger.info(f"Enhanced analysis completed for: {request.candidate_name}")
        
        return AnalysisResponse(
            success=True,
            analysis=analysis_result
        )
        
    except Exception as e:
        logger.error(f"Enhanced analysis failed for {request.candidate_name}: {str(e)}")
        return AnalysisResponse(
            success=False,
            error=str(e)
        )

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def save_analysis_to_results(analysis: InterviewAnalysis, candidate_info: dict = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (—Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)"""
    try:
        if results_service:
            success = results_service.save_analysis_results(analysis, candidate_info)
            if success:
                logger.info(f"Analysis results saved to results table for candidate: {analysis.candidate_name}")
            else:
                logger.error(f"Failed to save analysis results for candidate: {analysis.candidate_name}")
    except Exception as e:
        logger.error(f"Error saving analysis to results table: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": exc.detail,
            "status_code": exc.status_code
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    logger.error(f"Unhandled exception: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Internal server error",
            "detail": str(exc)
        }
    )

if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.is_development
    )
