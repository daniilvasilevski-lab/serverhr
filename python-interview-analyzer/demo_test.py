#!/usr/bin/env python3
"""
Demo —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Interview Analyzer
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '.')

async def test_language_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞...")
    
    try:
        from app.services.language_detector import LanguageDetector
        
        detector = LanguageDetector()
        
        test_cases = [
            ("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "ru"),
            ("John Smith", "en"),
            ("Anna Kowalski", "pl"),
            ("–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∏–ª—å–µ–≤", "ru"),
            ("Michael Johnson", "en"),
            ("Katarzyna Nowak", "pl")
        ]
        
        for name, expected in test_cases:
            detected = detector.detect_language_by_name(name)
            status = "‚úÖ" if detected == expected else "‚ùå"
            print(f"  {status} {name} ‚Üí {detected} (–æ–∂–∏–¥–∞–ª—Å—è {expected})")
        
        print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤: {e}")
        return False

async def test_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        from app.config.settings import settings
        
        print(f"  ‚úÖ –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.default_language}")
        print(f"  ‚úÖ –ü–æ—Ä—Ç: {settings.port}")
        print(f"  ‚úÖ –†–µ–∂–∏–º: {settings.env}")
        print(f"  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {settings.temp_dir}")
        print(f"  ‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {settings.scan_interval_minutes} –º–∏–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
        if Path(settings.temp_dir).exists():
            print(f"  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"  ‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

async def test_mock_analysis():
    """–¢–µ—Å—Ç –º–æ–∫-–∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∫-–∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        from app.models.evaluation_criteria import InterviewAnalysis, EvaluationCriteria
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        test_analysis = InterviewAnalysis(
            candidate_name="–¢–µ—Å—Ç –ö–∞–Ω–¥–∏–¥–∞—Ç",
            candidate_id="test_001",
            overall_score=7.5,
            criteria_scores={
                EvaluationCriteria.COMMUNICATION: 8.0,
                EvaluationCriteria.TECHNICAL_KNOWLEDGE: 7.0,
                EvaluationCriteria.PROBLEM_SOLVING: 8.5,
                EvaluationCriteria.STRESS_RESISTANCE: 6.5,
                EvaluationCriteria.TEAMWORK: 7.5,
                EvaluationCriteria.LEADERSHIP: 6.0,
                EvaluationCriteria.ADAPTABILITY: 8.0,
                EvaluationCriteria.MOTIVATION: 9.0,
                EvaluationCriteria.CULTURAL_FIT: 7.0,
                EvaluationCriteria.PROFESSIONALISM: 8.5
            },
            detailed_feedback="–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ–∫–∞–∑–∞–ª —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
            recommendations=[
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "–°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"
            ],
            red_flags=[],
            video_analysis={
                "eye_contact_percentage": 75,
                "emotion_analysis": {"confident": 60, "nervous": 20, "happy": 20},
                "gesture_frequency": 8
            },
            audio_analysis={
                "speech_rate": 150,
                "speech_clarity": 8,
                "confidence_level": 7
            },
            processing_time=45.2,
            analysis_date="2024-10-06T10:30:00Z"
        )
        
        print(f"  ‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç: {test_analysis.candidate_name}")
        print(f"  ‚úÖ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {test_analysis.overall_score}/10")
        print(f"  ‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {test_analysis.processing_time}—Å")
        print(f"  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {len(test_analysis.criteria_scores)}")
        print(f"  ‚úÖ –ó—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {test_analysis.video_analysis['eye_contact_percentage']}%")
        
        print("‚úÖ –ú–æ–∫-–∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–∫-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

async def test_api_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API...")
    
    try:
        from app.main import app
        from app.api.task_management import router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        print(f"  ‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        print(f"  ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {app.title}")
        print(f"  ‚úÖ –í–µ—Ä—Å–∏—è: {app.version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—É—Ç—ã
        routes = [route.path for route in app.routes]
        expected_routes = [
            "/",
            "/health", 
            "/analyze",
            "/api/v1/tasks/status"
        ]
        
        for route in expected_routes:
            if any(route in r for r in routes):
                print(f"  ‚úÖ –†–æ—É—Ç {route} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ùå –†–æ—É—Ç {route} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("‚úÖ API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

async def test_task_scheduler_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    print("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    
    try:
        from app.services.task_scheduler import TaskScheduler
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        class MockOpenAIClient:
            def __init__(self):
                self.api_key = "mock-key"
        
        mock_client = MockOpenAIClient()
        scheduler = TaskScheduler(mock_client)
        
        print(f"  ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω")
        print(f"  ‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scheduler.scan_interval}—Å")
        print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: {'–∑–∞–ø—É—â–µ–Ω' if scheduler.is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {bool(scheduler.stats)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status = scheduler.get_status()
        print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(status)} –ø–æ–ª–µ–π")
        
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Demo —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Interview Analyzer")
    print("=" * 60)
    
    tests = [
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_settings),
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞", test_language_detection),
        ("–ú–æ–∫-–∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é", test_mock_analysis),
        ("API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", test_api_structure),
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á", test_task_scheduler_init)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}:")
        try:
            if await test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á –≤ .env")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python3 -m uvicorn app.main:app --port 8000")
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        print("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ INSTALLATION.md –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
    
    return passed == total

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
